#include <WiFi.h>
#include <ros.h>
#include <std_msgs/String.h>

int leftMotorForward = 17; /* GPIO2(D4) -> IN3 */
int rightMotorForward = 5; /* GPIO15(D8) -> IN1 */
int leftMotorBackward = 16; /* GPIO0(D3) -> IN4 */
int rightMotorBackward = 18; /* GPIO13(D7) -> IN2 */
int en1 = 19;
int en2 = 4;
int trigPin=27;
int echoPin=26;

const char *ssid = "GalaxyM31E318";
const char *pass = "78654321";
IPAddress server(192,168,168,220);

// client used to connect to wifi
WiFiClient client;

// this is hardware class
class WiFiHardware
{
  public:

    WiFiHardware() {};

    void init()
    {
      client.connect(server, 11411);
    }

    int read()
    {
      return client.read(); 
    }

    void write(uint8_t *data, int length)
    {
      for (int i = 0; i < length; i++)
        client.write(data[i]);
    }

    unsigned long time()
    {
      return millis(); 
    }
};

ros::NodeHandle_<WiFiHardware> nh;

void ConnectToWifi()
{
  WiFi.mode(WIFI_STA);
  delay(10);
  Serial.println("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
}


std_msgs::String keycode;
std_msgs::String s;
//s.data
String key;
int sharp=0;
int angle=360;
int speed =3;
int stop=1;
int distance =0;
int duration =0;
int prevspeed=0;
int accel=3;






void stopping()
{
  digitalWrite(leftMotorForward, LOW);
  digitalWrite(leftMotorBackward, LOW);
  digitalWrite(rightMotorForward, LOW);
  digitalWrite(rightMotorBackward, LOW);
}
void uturn(){
  if(sharp==0){
    for(int i=0;i<20;i++){
      digitalWrite(leftMotorForward, HIGH);
      digitalWrite(rightMotorForward, HIGH);
      digitalWrite(rightMotorBackward, LOW);
      digitalWrite(leftMotorBackward, LOW);
      analogWrite(en1, 130-25*(3-speed));
      analogWrite(en2, 255-50*(3-speed));
      delay(140*3/speed);
    } 
  }
  else{
    for(int i=0;i<20;i++){
      digitalWrite(leftMotorForward, HIGH);
      digitalWrite(rightMotorForward, LOW);
      digitalWrite(rightMotorBackward, HIGH);
      digitalWrite(leftMotorBackward, LOW);
      analogWrite(en1, 255-50*(3-speed));
      analogWrite(en2, 255-50*(3-speed));
      delay(50*3/speed);
    }
  }
}
void back()
{
  if(prevspeed==0){
    for(int j=0;j<255-50*(3-speed);j+=10){
    digitalWrite(leftMotorForward, LOW);
    digitalWrite(rightMotorForward, LOW);
    digitalWrite(rightMotorBackward, HIGH);
    digitalWrite(leftMotorBackward, HIGH);
    analogWrite(en1, j);
    analogWrite(en2, j);
    delay(5*(10-accel)*j/50);  
    prevspeed=speed;
    nh.spinOnce();
    }
  }
  else if(prevspeed<speed){
    for(int j=255-50*(3-prevspeed);j<255-50*(3-speed);j+=10){
    digitalWrite(leftMotorForward, LOW);
    digitalWrite(rightMotorForward, LOW);
    digitalWrite(rightMotorBackward, HIGH);
    digitalWrite(leftMotorBackward, HIGH);
    analogWrite(en1, j);
    analogWrite(en2, j);
    delay(5*(10-accel)*j/50);  
    prevspeed=speed;
    nh.spinOnce();
  }
  else if(prevspeed>speed){
    for(int j=255-50*(3-prevspeed);j>255-50*(3-speed);j-=10){
    digitalWrite(leftMotorForward, LOW);
    digitalWrite(rightMotorForward, LOW);
    digitalWrite(rightMotorBackward, HIGH);
    digitalWrite(leftMotorBackward, HIGH);
    analogWrite(en1, j);
    analogWrite(en2, j);
    delay(5*(10-accel)*j/50);  
    prevspeed=speed;
    nh.spinOnce();
  }
  else if(prevspeed==speed){
    digitalWrite(leftMotorForward, LOW);
    digitalWrite(rightMotorForward, LOW);
    digitalWrite(rightMotorBackward, HIGH);
    digitalWrite(leftMotorBackward, HIGH);
    analogWrite(en1, 255-50*(3-speed));
    analogWrite(en2, 255-50*(3-speed));
  }
}
void forward()
{
  if(prevspeed==0){
   for(int j=0;j<255-50*(3-speed);j+=10){
    digitalWrite(leftMotorForward, HIGH);
    digitalWrite(rightMotorForward, HIGH);
    digitalWrite(rightMotorBackward, LOW);
    digitalWrite(leftMotorBackward, LOW);
    analogWrite(en1, j);
    analogWrite(en2, j);
    delay(3*(10-accel)*j/50);
    prevspeed=speed;
    nh.spinOnce();
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);  
    digitalWrite(trigPin,HIGH);
    delayMicroseconds(10); 
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
    distance = duration * 0.0344 / 2;
    if(distance<30){
      stopping();
    }
    }
  }
  else if(prevspeed<speed){
    for(int j=255-50*(3-prevspeed);j<255-50*(3-speed);j+=10){
    digitalWrite(leftMotorForward, HIGH);
    digitalWrite(rightMotorForward, HIGH);
    digitalWrite(rightMotorBackward, LOW);
    digitalWrite(leftMotorBackward, LOW);
    analogWrite(en1, j);
    analogWrite(en2, j);
    delay(3*(10-accel)*j/50);
    prevspeed=speed;
    nh.spinOnce();
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);  
    digitalWrite(trigPin,HIGH);
    delayMicroseconds(10); 
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
    distance = duration * 0.0344 / 2;
    if(distance<30){
      stopping();
    }
    }
  }
  else if(prevspeed>speed){
    for(int j=255-50*(3-prevspeed);j>255-50*(3-speed);j-=10){
    digitalWrite(leftMotorForward, HIGH);
    digitalWrite(rightMotorForward, HIGH);
    digitalWrite(rightMotorBackward, LOW);
    digitalWrite(leftMotorBackward, LOW);
    analogWrite(en1, j);
    analogWrite(en2, j);
    delay(3*(10-accel)*j/50);
    prevspeed=speed;
    nh.spinOnce();
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);  
    digitalWrite(trigPin,HIGH);
    delayMicroseconds(10); 
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
    distance = duration * 0.0344 / 2;
    if(distance<30){
      stopping();
    }
    }
  }
  else if(prevspeed==speed){
    digitalWrite(leftMotorForward, HIGH);
    digitalWrite(rightMotorForward, HIGH);
    digitalWrite(rightMotorBackward, LOW);
    digitalWrite(leftMotorBackward, LOW);
    analogWrite(en1, 255-50*(3-speed));
    analogWrite(en2, 255-50*(3-speed));
  }
  while(true){
    prevspeed=speed;
    nh.spinOnce();
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);  
    digitalWrite(trigPin,HIGH);
    delayMicroseconds(10); 
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
    distance = duration * 0.0344 / 2;
    if(distance<30){
      stopping();
    }
  }
}
void turnLeft()
{
  if(angle==90){
  if(sharp==0){
    for(int i=0;i<10;i++){
      digitalWrite(leftMotorForward, HIGH);
      digitalWrite(rightMotorForward, HIGH);
      digitalWrite(rightMotorBackward, LOW);
      digitalWrite(leftMotorBackward, LOW);
      analogWrite(en1, 255-50*(3-speed));
      analogWrite(en2, 130-25*(3-speed));
      delay(145*3/speed);
      nh.spinOnce();
    }
    forward();
  }
  else{
    for(int i=0;i<10;i++){
      digitalWrite(leftMotorForward, LOW);
      digitalWrite(rightMotorForward, HIGH);
      digitalWrite(rightMotorBackward, LOW);
      digitalWrite(leftMotorBackward, HIGH);
      analogWrite(en1, 255-50*(3-speed));
      analogWrite(en2, 255-50*(3-speed));
      delay(45*3/speed);
      nh.spinOnce();
    }
    forward();
    
   }
  }
  else{
    if(sharp==0){
      digitalWrite(leftMotorForward, HIGH);
      digitalWrite(rightMotorForward, HIGH);
      digitalWrite(rightMotorBackward, LOW);
      digitalWrite(leftMotorBackward, LOW);
      analogWrite(en1, 255-50*(3-speed));
      analogWrite(en2, 130-25*(3-speed));

  }
  else{
      digitalWrite(leftMotorForward, LOW);
      digitalWrite(rightMotorForward, HIGH);
      digitalWrite(rightMotorBackward, LOW);
      digitalWrite(leftMotorBackward, HIGH);
      analogWrite(en1, 255-50*(3-speed));
      analogWrite(en2, 255-50*(3-speed));

    
  }
  }
}
void turnRight(){
  if(angle==90){
  if(sharp==0){
    for(int i=0;i<10;i++){
      digitalWrite(leftMotorForward, HIGH);
      digitalWrite(rightMotorForward, HIGH);
      digitalWrite(rightMotorBackward, LOW);
      digitalWrite(leftMotorBackward, LOW);
      analogWrite(en1, 130-25*(3-speed));
      analogWrite(en2, 255-50*(3-speed));
      delay(132*3/speed);
      nh.spinOnce();
    }
    forward();
  }
  else{
    for(int i=0;i<10;i++){
      digitalWrite(leftMotorForward, HIGH);
      digitalWrite(rightMotorForward, LOW);
      digitalWrite(rightMotorBackward, HIGH);
      digitalWrite(leftMotorBackward, LOW);
      analogWrite(en1, 255-50*(3-speed));
      analogWrite(en2, 255-50*(3-speed));
      delay(50*3/speed);
      nh.spinOnce();
    }
    forward();
   }
  }
  else{
    if(sharp==0){
      digitalWrite(leftMotorForward, HIGH);
      digitalWrite(rightMotorForward, HIGH);
      digitalWrite(rightMotorBackward, LOW);
      digitalWrite(leftMotorBackward, LOW);
      analogWrite(en1, 130-25*(3-speed));
      analogWrite(en2, 255-50*(3-speed));

  }
  else{
      digitalWrite(leftMotorForward, HIGH);
      digitalWrite(rightMotorForward, LOW);
      digitalWrite(rightMotorBackward, HIGH);
      digitalWrite(leftMotorBackward, LOW);
      analogWrite(en1, 255-50*(3-speed));
      analogWrite(en2, 255-50*(3-speed));
  }
  }
}
void messageCb(const std_msgs::String& msg)
{
  key = msg.data;
  Serial.println(key);
  if (key.equals("s")) {
    if(stop==0)
    back();
  }
  else if (key.equals("w")) {
    if(stop==0)
    forward();
  }
  else if (key.equals("a")) {
    if(stop==0)
    turnLeft();
  }
  else if (key.equals("d")) {
    turnRight();
  }
  else if (key.equals("q")) {
    prevspeed=0;
    if(stop==0)
    stopping();
  }
  else if (key.equals("sharp")){
    sharp=1;
  }
  else if(key.equals("nsharp")){
    sharp=0;
  }
  else if(key.equals("90")){
    angle=90;
  }
  else if(key.equals("360")){
    angle=360;
  }
  else if(key.equals("1")){
    speed=1;
  }
  else if(key.equals("2")){
    speed=2;
  }
  else if(key.equals("3")){
    speed=3;
  }
  else if(key.equals("stop")){
    stop=1;
  }
  else if(key.equals("start")){
    stop=0;
  }
  else if(key.equals("uturn")){
    uturn();
  }
  else if(key.equals("high")){
    if(accel<10)
    accel+=1;
  }
  else if(key.equals("low")){
    if(accel>0)
    accel-=1;
  }
}

ros::Subscriber<std_msgs::String> sub("keyboard_input", &messageCb );

void setup()
{
  Serial.begin(115200);
  ConnectToWifi();
  Serial.println(1);
  nh.initNode();
  Serial.println(1);
  nh.subscribe(sub);
  Serial.println(1);
  pinMode(leftMotorForward, OUTPUT);
  pinMode(rightMotorForward, OUTPUT);
  pinMode(leftMotorBackward, OUTPUT);
  pinMode(rightMotorBackward, OUTPUT);
  pinMode(en1, OUTPUT);
  pinMode(en2, OUTPUT);
  pinMode(trigPin,OUTPUT);
  pinMode(echoPin, INPUT);
 
}

void loop()
{
 

  nh.spinOnce();
}